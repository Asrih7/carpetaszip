{"version":3,"file":"src_app_pages_test-do_test-do_module_ts.js","mappings":"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","sources":["./src/app/pages/test-do/test-do-routing.module.ts","./src/app/pages/test-do/test-do.module.ts","./src/app/pages/test-do/test-do.page.ts","./src/app/pages/test-do/test-do.page.html"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { TestDoPage } from './test-do.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: TestDoPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class TestDoPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\nimport { SwiperModule } from 'swiper/angular';\n\nimport { TestDoPageRoutingModule } from './test-do-routing.module';\n\nimport { TestDoPage } from './test-do.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    SwiperModule,\n    TestDoPageRoutingModule\n  ],\n  declarations: [TestDoPage]\n})\nexport class TestDoPageModule {}\n","import { AfterContentChecked, Component, OnInit, ViewChild } from '@angular/core';\nimport { AlertController, LoadingController, PopoverController, IonicSafeString} from '@ionic/angular';\nimport { MenuController} from '@ionic/angular';\nimport { Router } from '@angular/router';\nimport { NavparamService } from 'src/app/services/navparam.service';\nimport { AulavirtualrestProvider } from '../../providers/aulavirtualrest';\nimport { LogoutProvider } from '../../providers/logout';\nimport { Storage } from '@ionic/storage-angular';\nimport { DecimalPipe } from '@angular/common';\nimport { SwiperComponent } from 'swiper/angular';\nimport { SwiperOptions } from 'swiper';\nimport SwiperCore, { Virtual, Pagination, Scrollbar, EffectCube } from 'swiper';\nimport { BehaviorSubject } from 'rxjs';\nimport { TestIndexPage } from '../test-index/test-index.page';\n\n// install Swiper modules https://swiperjs.com/angular#virtual-slides\nSwiperCore.use([Virtual]);\n\n@Component({\n  selector: 'app-test-do',\n  templateUrl: './test-do.page.html',\n  styleUrls: ['./test-do.page.scss'],\n})\nexport class TestDoPage implements AfterContentChecked {\n\n  @ViewChild('swiper') swiper: SwiperComponent;\n\n  // config: SwiperOptions = {\n  //   pagination: false,\n  //   scrollbar: false\n  //   //effect: 'cube',\n  // };\n\n  test: any;\n  tipoTest: number;\n  idOposicion : number;\n  numMinutos: number = 0;\n  numPreguntas: number = 0;\n  // instrucciones: string = null;\n  continuar: number = 0;\n  posicion: number = 0;\n  usuario: any = [];\n  listaPreguntas: any[];\n  listaRespuestas: any[];\n  numeroPreguntas: any;\n  numeroRespuestasCorrectas: number = 0;\n  aciertos: number = 0;\n  fallos: number = 0;\n  blancos: number = 0;\n  dudosas: number = 0;\n  dudosasAcierto: number = 0;\n  dudosasFallo: number = 0;\n  aciertosTemp: number = 0;\n  fallosTemp: number = 0;\n  blancosTemp: number = 0;\n  tiempo: number = 0;\n  intervalo: any;\n  allChecked: boolean = false;\n  origen: any[];\n  etiqueta: string;\n  navParams: any;\n\n  // Adding Timing Functionality (https://www.youtube.com/watch?v=aOHJRqvcjTI)\n  time: BehaviorSubject<string> = new BehaviorSubject('00:00');\n  timer: number; // in seconds\n  interval: any;\n\n  constructor(private router: Router, private navParamService: NavparamService, public proveedor: AulavirtualrestProvider, public proveedorLogout: LogoutProvider, public alertCtrl: AlertController, public loadingCtrl: LoadingController, private storage: Storage, private decimalPipe: DecimalPipe, public popoverCtrl: PopoverController, private menu: MenuController) { \n    this.navParams = JSON.parse(this.navParamService.getNavData());\n    //console.log(this.navParams);\n    this.idOposicion = this.navParams['idOposicion'];\n    this.test = this.navParams['test']; \n    this.tipoTest = this.test['Tipo'];\n    this.numMinutos = this.navParams['numMinutos']; \n    this.numPreguntas = this.navParams['numPreguntas']; \n    // this.instrucciones = this.navParams['Instrucciones']; \n    this.continuar = this.navParams['continuar']; \n    this.origen = this.navParams['origen']; \n    this.etiqueta = this.navParams['etiqueta']; \n\n    this.initializaTest();\n  }\n\n  ngOnInit() {\n    //this.ocultarMenu();\n  }\n\n  ionViewWillEnter() {\n    //this.ocultarMenu();\n  }\n\n  ngAfterContentChecked(): void {\n    // if (this.swiper) {\n    //   this.swiper.updateSwiper({});\n    // }\n  }\n\n  swiperSlideChanged(e) {\n    //console.log('changed: ', e);\n  }\n\n  // ionViewWillEnter() {\n  //   this.ocultarMenu();\n  // }\n\n  // public ionViewWillEnter(){\n  //   this.slides.update();\n  // }\n\n  // ionViewWillLeave(){\n  //   this.slides.stopAutoplay();\n  // }\n\n  // ionViewDidEnter() {\n  //   this.slides.startAutoplay();\n  // }\n\n  // mostrarMenu(){\n  //   let tabs = document.querySelectorAll('.tabbar');\n  //   if ( tabs !== null ) {\n  //     Object.keys(tabs).map((key) => {\n  //       tabs[ key ].style.display = 'block';\n  //     });\n  //   } // end if\n\n  //   // let tabBar = document.getElementById('app-tab-bar'); \n  //   // if (tabBar !== null) { tabBar.style.display = 'block'; }\n  // }\n\n  // ocultarMenu(){\n  //   let tabs = document.querySelectorAll('.tabbar');\n  //   if ( tabs !== null ) {\n  //     Object.keys(tabs).map((key) => {\n  //       tabs[ key ].style.transform = 'translateY(56px)';        \n  //     });\n  //   } // end if\n\n  //   // let tabBar = document.getElementById('app-tab-bar'); \n  //   // if (tabBar !== null) { tabBar.style.display = 'none'; }\n  // }\n\n  async initializaTest() {\n\n    //console.log(this.test.IdTest);\n\n    this.listaPreguntas = [];\n    this.aciertos = 0;\n    this.fallos = 0;\n    this.blancos = 0;\n    this.dudosas = 0;\n    this.dudosasAcierto = 0;\n    this.dudosasFallo = 0;\n\n    const loading = await this.loadingCtrl.create({\n      message: \"Cargando preguntas...\"\n    });\n    loading.present();\n\n    // Si el test tiene instrucciones se muestran al empezar el test\n    if (this.test.Instrucciones != null && this.test.Instrucciones != '' && this.test.Instrucciones != ' ')\n      this.info();\n\n    // Se obtienen los datos del usuario de la memoria\n    this.storage.get('usuario').then((val) => {\n      if (val != null && val != undefined){\n        this.usuario = JSON.parse(val);\n\n        // Si se empieza el test desde el principio\n        if (this.continuar == 0) \n        {\n          // Si no se ha configurado el test ni por tiempo ni por nº de preguntas\n          if (this.numMinutos == 0 && this.numPreguntas == 0)\n          {\n            // Se guarda el estado inicial de la revisión del test\n            // this.proveedor.insertarRevisionTest(this.usuario.Mensaje.AuthorizationToken, this.test.IdTest)\n            // .subscribe(\n            //   //(data)=>{console.log(data);},\n            //   (data)=>{},\n            //   (error)=>{console.log(error);}\n            // ) \n            this.proveedor.insertarRevisionTestOposicion(this.usuario.Mensaje.AuthorizationToken, this.test['IdTest'], this.idOposicion)\n            .subscribe(\n              //(data)=>{console.log(data);},\n              (data)=>{},\n              (error)=>{console.log(error);}\n            ) \n\n            // Se obtiene el test original\n            this.proveedor.obtenerTest(this.usuario.Mensaje.AuthorizationToken, this.test['IdTest'])\n            .subscribe(\n              (data)=>{this.parseTestJson(data);},\n              (error)=>{console.log(error);},\n              () =>{\n                loading.dismiss();\n                if (this.numMinutos > 0)\n                  this.startTimer(this.numMinutos);\n                }\n            )\n            this.iniciarTiempo();            \n          }\n          else{\n            // Se obtiene el test configurado\n            this.proveedor.configurarTest(this.usuario.Mensaje.AuthorizationToken, this.test['IdTest'], this.numPreguntas, this.numMinutos, true)\n            .subscribe(\n              (data)=>{this.parseTestJson(data);},\n              (error)=>{console.log(error);},\n              () =>{\n                loading.dismiss();                \n                if (this.numMinutos > 0)\n                  this.startTimer(this.numMinutos);\n              }\n            )\n            this.iniciarTiempo();\n          }\n        }\n        // Si el test estaba PAUSADO y se continúa\n        else\n        {\n          // Se recupera el test pausado\n          this.proveedor.recuperarTest(this.usuario.Mensaje.AuthorizationToken, this.test['IdTest'], this.idOposicion)\n          .subscribe(\n            (data)=>{this.parseTestJson(data);},\n            (error)=>{console.log(error);},\n            () =>{\n              loading.dismiss();    \n              this.swiper.swiperRef.slideTo(this.posicion, 1000);         \n              if (this.numMinutos > 0)\n                this.startTimer(this.numMinutos);              \n            }\n          )\n          this.iniciarTiempo();\n          \n        }\n      }\n      else{\n        // Si no se han recuperado los datos se vuelve a la página de test\n        //this.navCtrl.push(TestPage);\n        this.router.navigate(['/test']);\n      }\n    });\n    \n  }\n\n  parseTestJson(data){\n\n    //console.log(data);\n\n    let jsonArray = data.Mensaje.Preguntas;\n\n    this.listaPreguntas = [];\n\n    for(let i=0; i < jsonArray.length; i++)\n    {\n      let jsonObject = jsonArray[i];\n      //jsonObject.IdPregunta = i+1;\n      this.listaPreguntas.push(jsonObject);\n\n      // for(let j=0; j < this.listaPreguntas.length; j++)\n      // {\n      //   let jsonArray = this.listaPreguntas[j].Respuestas;\n      // }\n    }\n\n    //console.log(this.listaPreguntas);\n\n    this.numeroPreguntas = this.listaPreguntas.length;\n\n    if (this.numMinutos == 0)\n    {\n      this.numMinutos = data.Mensaje.Tiempo / 60;\n    }\n\n    this.posicion = data.Mensaje.Posicion;\n\n\n    //console.log('posición: ' + this.posicion);\n\n  }\n\n  // seleccionar(respuesta){\n    \n  //   // Se guarda la respuesta seleccionada\n  //   respuesta.Seleccionada = 1;\n\n  //   // Se contabilizan los aciertos y fallos\n  //   if (respuesta.RespuestaCorrecta == 1)\n  //     this.aciertos++;\n  //   else\n  //     this.fallos++;\n\n  //   this.next();\n  // }\n\n  seleccionar(pregunta, respuesta, respuestas, index){ \n\n    //console.log('seleccionar');\n\n    // Si es un test SIN respuesta múltiple\n    if (this.test['Multirespuesta'] == 0){\n\n      // Se reinician todas las respuestas menos la seleccionada\n      for(let i=0; i<respuestas.length; i++){\n\n        if(index != i){\n\n          // Si la respuesta había sido seleccionada\n          if (respuestas[i].Seleccionada == 1){\n\n            // Se descontabilizan los aciertos y fallos\n            if (respuestas[i].RespuestaCorrecta == 1){\n              if (this.aciertos > 0) \n                this.aciertos--;\n            }\n            else{\n              if (this.fallos > 0) \n                this.fallos--;\n            }\n          }\n          \n          // Se reinicia la selección de la respuesta\n          respuestas[i].Seleccionada = 0;    \n        }\n      }\n    }\n\n    // Se marca la respuesta como seleccionada si NO estaba seleccionada previamente\n    if (respuesta.Seleccionada == 0){\n      \n      // Se marca la pregunta como contestada\n      pregunta.Contestada = 1;\n\n      // Se marca la respuesta como seleccionada\n      respuesta.Seleccionada = 1;\n\n      // Si es un test SIN respuesta múltiple\n      if (this.test['Multirespuesta'] == 0){\n\n        // Se contabilizan los aciertos y fallos \n        if (respuesta.RespuestaCorrecta == 1)\n        {\n          pregunta.Acertada = 1;\n          pregunta.Fallada = 0;\n\n          if (pregunta.Dudosa == 1)\n            this.blancos++;\n          else\n            this.aciertos++;\n        }\n        else\n        {\n          pregunta.Fallada = 1;\n          pregunta.Acertada = 0;\n\n          if (pregunta.Dudosa == 1)\n            this.blancos++;\n          else\n            this.fallos++;\n        }\n\n        // Se contabilizan las dudosas\n        if (pregunta.Dudosa == 1)\n        {\n          this.dudosas++;\n\n          if (respuesta.RespuestaCorrecta == 1)\n          {\n            this.dudosasAcierto++;\n          }\n          else\n          {\n            this.dudosasFallo++;\n          }\n        }\n\n      }\n      // Si es un test CON respuesta múltiple\n      else{\n        // Se contabilizan los aciertos y fallos al finalizar\n      }\n\n    }\n    // Si la respuesta seleccionada YA estaba seleccionada previamente\n    else{\n\n      // Se marca la pregunta como NO contestada\n      pregunta.Contestada = 0;\n      pregunta.Fallada = 0;\n      pregunta.Acertada = 0;\n\n      // Se marca la respuesta como NO seleccionada\n      respuesta.Seleccionada = 0;\n\n      // Si es un test SIN respuesta múltiple\n      if (this.test['Multirespuesta'] == 0){\n\n        // Se descontabilizan los aciertos y fallos\n        if (respuesta.RespuestaCorrecta == 1){\n          if (this.aciertos > 0) \n            this.aciertos--;\n        }\n        else{\n          if (this.fallos > 0 ) \n            this.fallos--;\n        }\n\n        // Se descontabilizan las dudosas\n        if (pregunta.Dudosa == 1)\n        {\n          this.dudosas--;\n\n          if (respuesta.RespuestaCorrecta == 1)\n          {\n            if (this.dudosasAcierto > 0) \n              this.dudosasAcierto--;\n          }\n          else\n          {\n            if (this.dudosasFallo > 0) \n              this.dudosasFallo--;\n          }\n        }\n      }      \n    }\n    \n\n    // console.log(\"aciertos: \" + this.aciertos);\n    // console.log(\"fallos: \" + this.fallos);\n\n    // Si es un test SIN respuesta múltiple y la pregunta ha sido contestada\n    if (this.test['Multirespuesta'] == 0 && pregunta.Contestada > 0){\n      this.next();\n    }\n  }\n\n  prev()\n  {\n    this.swiper.swiperRef.slidePrev(1000);\n  }\n\n  next()\n  {\n    this.swiper.swiperRef.slideNext(1000);\n  }\n\n  goTo(position: number)\n  {\n    this.swiper.swiperRef.slideTo(position, 500);\n  }\n\n  limpiar(pregunta)\n  {\n    if (pregunta != null)\n    {\n        pregunta.Contestada = 0;\n\n        for(let j=0; j < pregunta.Respuestas.length; j++){\n          pregunta.Respuestas[j].Seleccionada = 0;     \n        }  \n\n        //pregunta.Dudosa = 0;\n    }\n  }\n\n  marcarDudosa(pregunta)\n  {\n    pregunta.Dudosa = 1;\n\n    // Si es un test SIN respuesta múltiple\n    if (this.test['Multirespuesta'] == 0){\n      if (pregunta.Contestada)\n      {    \n        this.dudosas++;\n        this.blancos++;\n        \n        if (pregunta.Acertada == 1)\n        {\n          this.dudosasAcierto++;\n\n          if (this.aciertos > 0)\n            this.aciertos--;\n        }\n        else if (pregunta.Fallada == 1)\n        {\n          this.dudosasFallo++;\n\n          if (this.fallos > 0)\n            this.fallos--;\n        }\n\n      }\n    }\n    // Si es un test CON respuesta múltiple\n    else{\n      // Se contabilizan los aciertos y fallos al finalizar\n    }\n  }\n\n  desmarcarDudosa(pregunta)\n  {\n    pregunta.Dudosa = 0;\n    \n    // Si es un test SIN respuesta múltiple\n    if (this.test['Multirespuesta'] == 0){\n      if (pregunta.Contestada)\n      {\n        if (this.dudosas > 0)\n          this.dudosas--;\n\n        if (this.blancos > 0)\n          this.blancos--;\n\n        if (pregunta.Acertada == 1)\n        {\n          if (this.dudosasAcierto > 0)\n            this.dudosasAcierto--;\n\n          this.aciertos++;\n        }\n        else if (pregunta.Fallada == 1)\n        {\n          if (this.dudosasFallo > 0)\n            this.dudosasFallo--;\n\n          this.fallos++;\n        }\n      }\n    }\n    // Si es un test CON respuesta múltiple\n    else{\n      // Se contabilizan los aciertos y fallos al finalizar\n    }\n  }\n\n  restart() {\n    //this.swiper.swiperRef.lockSwipes(false);\n    this.swiper.swiperRef.slideTo(0, 500);\n    //this.swiper.swiperRef.lockSwipes(true);\n  }\n\n  async info(){    \n    //this.navCtrl.push(TestInfoPage, {idTest: this.test.IdTest});\n    const alert = await this.alertCtrl.create({\n      header: 'Instrucciones',\n      message: new IonicSafeString(this.test.Instrucciones), \n      buttons: ['Entendido']\n    });\n    await alert.present();\n  }\n\n  async terminar(){\n    const confirm = await this.alertCtrl.create({\n      header: '¿Has terminado?',\n      message: 'Al finalizar el test se calculará tu resultado',\n      buttons: [\n        {\n          text: 'No',\n          handler: () => {\n\n          }\n        },\n        {\n          text: 'Si',\n          handler: () => {\n            this.stopTimer();\n            this.pararTiempo();\n            this.obtenerResultado();            \n          }\n        }\n      ]\n    });\n    await confirm.present();\n  }\n\n  async cancelar(){\n    const confirm = await this.alertCtrl.create({\n      header: 'Cancelar Test',\n      message: 'Se perderán todos los datos ¿Seguro que deseas cancelar el test?',\n      buttons: [\n        {\n          text: 'No',\n          handler: () => {\n\n          }\n        },\n        {\n          text: 'Si',\n          handler: () => {\n\n            // Se elimina el estado de la revisión del test\n            this.proveedor.eliminarRevisionTest(this.usuario.Mensaje.AuthorizationToken, this.test['IdTest'])\n            .subscribe(\n              //(data)=>{console.log(data);},\n              (data)=>{},\n              (error)=>{console.log(error);}\n            ) \n            \n            // Se para el tiempo\n            this.stopTimer();\n            this.pararTiempo();\n\n            // Se vuelve a mostrar el menú\n            //this.mostrarMenu();\n\n            // Se redirecciona a la página de origen\n            if (this.origen != null) {\n              //this.navCtrl.push(ModuleDetailPage, {modulo: this.origen});\n              this.navParamService.setNavData(this.origen);\n              this.router.navigate(['/module-detail']);\n            }\n            else if (this.etiqueta != null)\n            {\n              this.navParamService.setNavData(this.etiqueta);\n\n              if (this.etiqueta === 'Simulacros')\n                this.router.navigate(['/test']);\n              else\n                this.router.navigate(['/specific-content']);\n            }\n            else {\n              //this.navCtrl.push(TestPage);   \n              this.router.navigate(['/tabs/test']);\n            }\n\n              // no sirve porque recarga la página y perdemos el menú\n              // this.router.navigate(['/tabs/test'])\n              // .then(() => {\n              //   window.location.reload();\n              // });\n          }\n        }\n      ]\n    });\n    await confirm.present();\n  }\n\n  async obtenerResultado()\n  {\n    const loading = await this.loadingCtrl.create({\n      message: \"Calculando...\"\n    });\n    loading.present();\n\n    var multirespuesta = this.test['Multirespuesta'];\n    \n    // Si es un test SIN multirespuesta\n    if (multirespuesta == 0){\n      this.blancos = this.numeroPreguntas - this.aciertos - this.fallos;\n    }\n    // Si es un test CON multirespuesta\n    else{\n\n      // Se recorren todas las preguntas y respuestas del test\n      for(let i=0; i < this.listaPreguntas.length; i++){\n\n        // Se inicializan la variables temporales\n        this.aciertosTemp = 0;\n        this.fallosTemp = 0;\n        this.blancosTemp = 0;\n        this.numeroRespuestasCorrectas = 0;\n\n        for(let j=0; j < this.listaPreguntas[i].Respuestas.length; j++){\n\n          if (this.listaPreguntas[i].Respuestas[j].RespuestaCorrecta == 1)\n            this.numeroRespuestasCorrectas++;\n\n          // Si la respuesta había sido seleccionada\n          if (this.listaPreguntas[i].Respuestas[j].Seleccionada == 1){\n\n            // Si la respuesta es correcta\n            if (this.listaPreguntas[i].Respuestas[j].RespuestaCorrecta == 1){              \n              this.aciertosTemp++;\n            }\n            // si la respuesta es incorrecta\n            else{              \n              this.fallosTemp++;\n            }\n          }\n          // Si la respuesta no ha sido seleccionada\n          else {            \n            this.blancosTemp++;\n          }          \n        }\n\n        // Se contabilizan los aciertos, fallos y dudosas\n        if (this.aciertosTemp == this.numeroRespuestasCorrectas){\n          if (this.listaPreguntas[i].Dudosa == 1)\n          {\n            this.dudosasAcierto++;\n            this.blancos++;\n          }\n          else\n            this.aciertos++;\n        \n        }else if (this.blancosTemp == this.listaPreguntas[i].Respuestas.length){\n          this.blancos++;\n        }else {\n          if (this.listaPreguntas[i].Dudosa == 1)\n          {\n            this.dudosasFallo++;\n            this.blancos++;\n          }\n          else\n            this.fallos++;\n          \n        }\n\n        // Se contabiliza el número total de dudosas\n        if (this.listaPreguntas[i].Dudosa == 1)\n          this.dudosas++;\n      }\n\n    }\n\n    // Si es un test de PERSONALIDAD\n    if (this.test['Tipo'] == 4)\n      multirespuesta = 1; // CASO PARTICULAR: El test no es multirespuesta pero las preguntas sí\n\n    // Se actualiza la revisión de preguntas del test      \n    this.proveedor.actualizarRevisionPreguntasTest(this.usuario.Mensaje.AuthorizationToken, this.listaPreguntas, this.test['IdTest'], multirespuesta)\n    .subscribe(\n      // (data)=>{console.log(data);},\n      (data)=>{},\n      (error)=>{console.log(error);}\n    ) \n\n    // Se obtiene el resultado y se guarda en base de datos\n\n    // this.proveedor.nuevoResultadoOposicion(this.usuario.Mensaje.AuthorizationToken, this.idOposicion, this.test.IdTest, this.test.IdTema, this.test.IdTemario, this.aciertos, this.fallos, this.blancos, this.tiempo)\n    // .subscribe(\n    //   //(data)=>{console.log(data);},\n    //   (data)=>{this.mostrarResultado(data);},\n    //   (error)=>{console.log(error);},\n    //   () =>{loader.dismiss()}\n    // )     \n    \n    this.proveedor.nuevoResultadoOposicionTipoTest(this.usuario.Mensaje.AuthorizationToken, this.idOposicion, this.test['IdTest'], this.test['Tipo'], this.test['IdTema'], this.test['IdTemario'], this.aciertos, this.fallos, this.blancos, this.dudosas, this.dudosasAcierto, this.dudosasFallo, this.tiempo)\n    .subscribe(\n      //(data)=>{console.log(data);},\n      (data)=>{this.irAResultado(data);},\n      (error)=>{console.log(error);},\n      () =>{loading.dismiss()}\n    ) \n  }\n\n  // mostrarResultado(resultado: any){\n  //   const confirm = this.alertCtrl.create({\n  //     title: 'Resultado: ' + this.decimalPipe.transform(resultado.Mensaje.Resultado/10, '1.2-2'),\n  //     message: \"Detalles del resultado: <br><br>Aciertos: \" + this.aciertos + \"<br><br>Fallos: \" + this.fallos + \"<br><br>Sin contestar: \" + this.blancos + \"</b><br><br> Mi media: \" + this.decimalPipe.transform(resultado.Mensaje.MediaUsuario/10, '1.2-2') + \"<br><br> Media alumnos: \" + this.decimalPipe.transform(resultado.Mensaje.MediaOpositores/10, '1.2-2'),\n  //     buttons: [\n  //       {\n  //         text: 'Revisar',\n  //         handler: () => {\n  //           this.navCtrl.push(TestReviewPage, {test: this.test, preguntas: this.listaPreguntas, respuestas: this.listaRespuestas, aciertos: this.aciertos, fallos: this.fallos, blancos: this.blancos, resultado: resultado});          \n  //         }\n  //       },\n  //       {\n  //         text: 'Salir',\n  //         handler: () => {\n  //           this.mostrarMenu();\n  //           this.navCtrl.push(TestPage);\n  //         }\n  //       }\n  //     ]\n  //   });\n  //   confirm.present();\n  // }\n\n  irAResultado(resultado: any){\n    //console.log(resultado);\n    //console.log(resultado);\n    //this.navCtrl.push(TestScorePage, {test: this.test, listaPreguntas: this.listaPreguntas, listaRespuestas: this.listaRespuestas, aciertos: this.aciertos, fallos: this.fallos, blancos: this.blancos, nota: this.decimalPipe.transform(resultado.Mensaje.Resultado/10, '1.2-2'), mediaAlumnos: this.decimalPipe.transform(resultado.Mensaje.MediaOpositores/10, '1.2-2'), origen: this.origen});\n    this.navParamService.setNavData(JSON.stringify({idOposicion: this.idOposicion, test: this.test, tipoTest: this.test['Tipo'], valorFallo: resultado.Mensaje.ValorFallo, listaPreguntas: this.listaPreguntas, listaRespuestas: this.listaRespuestas, aciertos: this.aciertos, fallos: this.fallos, blancos: this.blancos, dudosas: this.dudosas, dudosasAcierto: this.dudosasAcierto, dudosasFallo: this.dudosasFallo, nota: this.decimalPipe.transform(resultado.Mensaje.Resultado/10, '1.2-2'), notaRiesgo: this.decimalPipe.transform(resultado.Mensaje.ResultadoRiesgo/10, '1.2-2'), mediaAlumnos: this.decimalPipe.transform(resultado.Mensaje.MediaOpositores/10, '1.2-2'), origen: this.origen, etiqueta: this.etiqueta, revisar: false}));\n    this.router.navigate(['/test-review']);\n  }\n\n  iniciarTiempo(){\n    clearInterval(this.intervalo);\n    this.intervalo = setInterval(function(){\n      this.tiempo++;\n    }.bind(this), 1000)\n  }\n\n  pararTiempo(){\n    clearInterval(this.intervalo);\n  }\n\n  startTimer(duration: number)\n  {\n    clearInterval(this.interval);\n    this.timer = duration * 60;\n    this.interval = setInterval( () => {\n      this.updateTimeValue()\n    }, 1000);\n  }\n\n  stopTimer(){\n    clearInterval(this.interval);\n    this.time.next('00:00');\n  }\n\n  updateTimeValue() {\n    let minutes: any = this.timer / 60;\n    let seconds: any = this.timer % 60;\n\n    if (Math.floor(minutes) < 100)\n      minutes = String('0' + Math.floor(minutes)).slice(-2);    \n    else\n      minutes = String(Math.floor(minutes));\n\n    seconds = String('0' + Math.floor(seconds)).slice(-2);\n\n    const text = minutes + ':' + seconds;\n    this.time.next(text);\n\n    --this.timer;\n\n    if (this.timer < 0){\n      this.stopTimer();\n      this.pararTiempo();\n      this.obtenerResultado();\n    }\n  }\n\n  async verIndice(ev: any) {\n\n    const popover = await this.popoverCtrl.create({\n      component: (TestIndexPage),\n      componentProps: {preguntas: this.listaPreguntas, swiper: this.swiper},\n      event: ev,\n      translucent: true\n    });\n    await popover.present();\n        \n  }\n\n  openMenu() {\n    this.menu.enable(true, 'indicePreguntas');\n    this.menu.open('indicePreguntas');\n  }\n\n  closeMenu() {\n    this.menu.close('indicePreguntas');\n  }\n\n}\n","<ion-header>\n  <ion-toolbar class=\"ion-text-center\" color=\"primary\">\n    <ion-buttons slot=\"start\">\n      <ion-button (click)=\"cancelar()\" color=\"danger\">\n        <ion-icon slot=\"icon-only\" name=\"close-circle-outline\"></ion-icon>\n      </ion-button>\n    </ion-buttons>    \n    <ion-buttons slot=\"primary\">\n      <!-- <ion-button>\n        <ion-icon slot=\"icon-only\" ios=\"ellipsis-horizontal\" md=\"ellipsis-vertical\"></ion-icon>\n      </ion-button> -->\n      <ion-button (click)=\"info()\" [ngClass]=\"test.Instrucciones == '' || test.Instrucciones == ' ' || test.Instrucciones == null ? 'hidden' : 'visible' \">\n        <ion-icon slot=\"icon-only\" name=\"information-circle-outline\"></ion-icon>\n      </ion-button>\n      &nbsp;\n      <ion-button (click)=\"terminar()\">\n        <ion-icon slot=\"icon-only\" name=\"flag-outline\"></ion-icon>\n      </ion-button>\n    </ion-buttons>\n    <ion-title *ngIf=\"numMinutos > 0\">\n      <ion-icon *ngIf=\"timer >= 60\" name=\"timer-outline\"></ion-icon> \n      <ion-icon *ngIf=\"timer < 60\" name=\"alert-circle-outline\" color=\"danger\" ></ion-icon> \n      {{ time | async }}\n    </ion-title> \n  </ion-toolbar>\n</ion-header>\n\n<ion-menu side=\"start\" menuId=\"indicePreguntas\" contentId=\"indice\">\n  <ion-header>\n    <ion-toolbar color=\"primary\">\n      <ion-buttons slot=\"end\">\n        <ion-button (click)=\"closeMenu()\">\n          <ion-icon slot=\"icon-only\" name=\"close-outline\"></ion-icon>\n        </ion-button>\n      </ion-buttons>\n      <ion-title>Preguntas</ion-title>\n    </ion-toolbar>\n  </ion-header>\n  <ion-content>\n    <ion-grid>\n      <ion-row>\n        <ion-col *ngFor=\"let pregunta of listaPreguntas; let i = index\">\n          <ion-menu-toggle auto-hide=\"true\">\n            <ion-button size=\"small\" *ngIf=\"listaPreguntas[i].IdPregunta < 10 && listaPreguntas[i].Contestada == 0\"  [ngClass]=\"listaPreguntas[i].Dudosa == 1 ? 'dudosa' : 'blanco' \" (click)=\"goTo(i)\">\n              {{'0' + (i+1)}}\n            </ion-button> \n            <ion-button size=\"small\" *ngIf=\"listaPreguntas[i].IdPregunta < 10 && listaPreguntas[i].Contestada > 0\" [ngClass]=\"listaPreguntas[i].Dudosa == 1 ? 'dudosa_contestada' : '' \" (click)=\"goTo(i)\">\n              {{'0' + (i+1)}}\n            </ion-button> \n            <ion-button size=\"small\" *ngIf=\"listaPreguntas[i].IdPregunta > 9 && listaPreguntas[i].Contestada == 0\" [ngClass]=\"listaPreguntas[i].Dudosa == 1 ? 'dudosa' : 'blanco' \" (click)=\"goTo(i)\">\n              {{i+1}}\n            </ion-button> \n            <ion-button size=\"small\" *ngIf=\"listaPreguntas[i].IdPregunta > 9 && listaPreguntas[i].Contestada > 0\" [ngClass]=\"listaPreguntas[i].Dudosa == 1 ? 'dudosa_contestada' : '' \" (click)=\"goTo(i)\">\n              {{i+1}}\n            </ion-button> \n          </ion-menu-toggle>\n        </ion-col>\n      </ion-row>\n    </ion-grid>\n  </ion-content>\n</ion-menu>\n\n<ion-router-outlet id=\"indice\"></ion-router-outlet>\n\n<ion-content>\n  <!-- <swiper #swiper [cssMode]=\"true\" [pagination]=\"{ type: 'progressbar' }\" [navigation]=\"false\" -->\n  <!-- <swiper #swiper [config]=\"config\"\n    (slideChange)=\"swiperSlideChanged($event)\"> -->\n  <swiper #swiper [virtual]=\"true\">\n    <ng-template swiperSlide *ngFor=\"let pregunta of listaPreguntas; let i = index\">\n      <ion-card>\n        <ion-card-header class=\"ion-text-center\">   \n          <ion-button fill=\"clear\" (click)=\"prev()\" [ngClass]=\"listaPreguntas[i].IdPregunta == 1 ? 'hidden' : 'visible' \">\n            <ion-icon slot=\"icon-only\" name=\"caret-back\"></ion-icon>\n          </ion-button> \n          <ion-button fill=\"clear\" (click)=\"openMenu()\">\n            <ion-icon name=\"apps\"></ion-icon>\n          </ion-button>\n          <!-- <ion-button fill=\"clear\" (click)=\"verIndice($event)\">\n            <ion-icon name=\"apps\"></ion-icon>\n          </ion-button>    -->\n          <ion-button fill=\"clear\" (click)=\"next()\" [ngClass]=\"listaPreguntas[i].IdPregunta == numeroPreguntas ? 'none' : 'block' \">\n            <ion-icon slot=\"icon-only\" name=\"caret-forward\"></ion-icon>\n          </ion-button>\n          <ion-button fill=\"clear\" (click)=\"terminar()\" [ngClass]=\"listaPreguntas[i].IdPregunta == numeroPreguntas ? 'block' : 'none' \">\n            <ion-icon slot=\"icon-only\" name=\"flag\"></ion-icon>\n          </ion-button>\n          <ion-card-title color=\"primary\">\n              <!-- Pregunta {{listaPreguntas[i].IdPregunta}} / {{numeroPreguntas}} -->\n              {{i + 1}} / {{numeroPreguntas}}\n          </ion-card-title>\n        </ion-card-header>\n\n        <!-- <ion-card-header color=\"primary\" class=\"ion-text-center\">\n          <ion-card-subtitle>        \n            {{listaTemas[i].TituloBloque}}\n          </ion-card-subtitle>\n          <ion-card-title>TEMA {{listaTemas[i].IdTema}}</ion-card-title>\n        </ion-card-header>\n    \n        <ion-card-content class=\"ion-text-wrap\">\n          <h3><b>{{listaTemas[i].Titulo}}</b></h3>\n        </ion-card-content>     -->\n\n        <ion-card-content class=\"ion-text-wrap\">\n            <h2><b>{{listaPreguntas[i].Texto}}</b></h2>\n        </ion-card-content>\n\n        <ion-card *ngFor=\"let respuesta of listaPreguntas[i].Respuestas; let j = index\" button=\"true\" (click)=\"seleccionar(listaPreguntas[i], listaPreguntas[i].Respuestas[j], listaPreguntas[i].Respuestas, j)\">\n          <ion-card-content class=\"ion-text-wrap\">\n              <ion-card-subtitle class=\"ion-text-left\">\n                <ion-checkbox color=\"primary\" [checked]=\"listaPreguntas[i].Respuestas[j].Seleccionada == 1 ? true : false\" ></ion-checkbox>\n                <ion-label>{{listaPreguntas[i].Respuestas[j].Texto}}</ion-label>                \n                <!-- <ion-checkbox id=\"cb_{{listaPreguntas[i].IdPregunta}}_{{listaPreguntas[i].Respuestas[j].IdRespuesta}}\" color=\"dark\" checked=\"false\" (ionChange)=\"seleccionar(listaPreguntas[i].IdPregunta, listaPreguntas[i].Respuestas[j], listaPreguntas[i].Respuestas, j)\"></ion-checkbox> -->\n              </ion-card-subtitle>                  \n              <!-- <ion-item>\n                <ion-label>{{listaPreguntas[i].Respuestas[j].Texto}}</ion-label>\n                <ion-radio color=\"dark\" checked=\"false\" (click)=\"seleccionar(listaPreguntas[i].Respuestas[j])\"></ion-radio>\n              </ion-item> -->\n            <!-- <ion-grid>\n              <ion-row>\n                <ion-col col-1>\n                  <div><ion-checkbox color=\"dark\" (click)=\"seleccionar(listaPreguntas[i].Respuestas[j])\"></ion-checkbox></div>\n                </ion-col>\n                <ion-col>\n                  <div>                          \n                    <button style=\"background-color:transparent\" (click)=\"seleccionar(listaPreguntas[i].Respuestas[j])\">                                     \n                      {{listaPreguntas[i].Respuestas[j].Texto}}                \n                    </button>\n                  </div>\n                </ion-col>\n              </ion-row>                        \n            </ion-grid>                 -->\n          </ion-card-content>                \n        </ion-card>\n        <br>\n        <br>\n        <br>\n        <!-- <ion-button color=\"tertiary\" outline (click)=\"limpiar(listaPreguntas[i])\"><ion-icon name=\"trash-outline\"></ion-icon> LIMPIAR</ion-button> -->        \n        <!-- <ion-button *ngIf=\"listaPreguntas[i].Dudosa == 0\" ion-button icon-start color=\"warning\" outline (click)=\"marcarDudosa(listaPreguntas[i])\"><ion-icon name=\"help-circle-outline\"></ion-icon> DUDOSA</ion-button>\n        <ion-button *ngIf=\"listaPreguntas[i].Dudosa > 0\" ion-button icon-start color=\"warning\" (click)=\"desmarcarDudosa(listaPreguntas[i])\"><ion-icon name=\"help-circle\"></ion-icon> DUDOSA</ion-button> -->\n        <ion-fab vertical=\"bottom\" horizontal=\"end\">\n          <ion-fab-button size=\"small\" color=\"white\" (click)=\"limpiar(listaPreguntas[i])\" title=\"Limpiar\"><ion-icon name=\"trash-outline\"></ion-icon></ion-fab-button>\n        </ion-fab>\n        <ion-fab *ngIf=\"listaPreguntas[i].Dudosa == 0 && tipoTest != 4\" vertical=\"top\" horizontal=\"start\">\n          <ion-fab-button size=\"small\" color=\"white\" (click)=\"marcarDudosa(listaPreguntas[i])\" title=\"Dudosa\"><ion-icon name=\"help-circle-outline\" color=\"warning\"></ion-icon></ion-fab-button>\n        </ion-fab>\n        <ion-fab *ngIf=\"listaPreguntas[i].Dudosa > 0 && tipoTest != 4\" vertical=\"top\" horizontal=\"start\">\n          <ion-fab-button size=\"small\" color=\"warning\" (click)=\"desmarcarDudosa(listaPreguntas[i])\" title=\"Dudosa\"><ion-icon name=\"help-circle-outline\"></ion-icon></ion-fab-button>\n        </ion-fab>\n      </ion-card>\n    </ng-template>\n  </swiper>\n</ion-content>\n"],"names":["IonicSafeString","SwiperCore","Virtual","BehaviorSubject","TestIndexPage","i0","use","TestDoPage","constructor","router","navParamService","proveedor","proveedorLogout","alertCtrl","loadingCtrl","storage","decimalPipe","popoverCtrl","menu","navParams","JSON","parse","getNavData","idOposicion","test","tipoTest","numMinutos","numPreguntas","continuar","origen","etiqueta","initializaTest","ngOnInit","ionViewWillEnter","ngAfterContentChecked","swiperSlideChanged","e","listaPreguntas","aciertos","fallos","blancos","dudosas","dudosasAcierto","dudosasFallo","loading","create","message","present","Instrucciones","info","get","then","val","undefined","usuario","insertarRevisionTestOposicion","Mensaje","AuthorizationToken","subscribe","data","error","console","log","obtenerTest","parseTestJson","dismiss","startTimer","iniciarTiempo","configurarTest","recuperarTest","swiper","swiperRef","slideTo","posicion","navigate","jsonArray","Preguntas","i","length","jsonObject","push","numeroPreguntas","Tiempo","Posicion","seleccionar","pregunta","respuesta","respuestas","index","Seleccionada","RespuestaCorrecta","Contestada","Acertada","Fallada","Dudosa","next","prev","slidePrev","slideNext","goTo","position","limpiar","j","Respuestas","marcarDudosa","desmarcarDudosa","restart","alert","header","buttons","terminar","confirm","text","handler","stopTimer","pararTiempo","obtenerResultado","cancelar","eliminarRevisionTest","setNavData","multirespuesta","aciertosTemp","fallosTemp","blancosTemp","numeroRespuestasCorrectas","actualizarRevisionPreguntasTest","nuevoResultadoOposicionTipoTest","tiempo","irAResultado","resultado","stringify","valorFallo","ValorFallo","listaRespuestas","nota","transform","Resultado","notaRiesgo","ResultadoRiesgo","mediaAlumnos","MediaOpositores","revisar","clearInterval","intervalo","setInterval","bind","duration","interval","timer","updateTimeValue","time","minutes","seconds","Math","floor","String","slice","verIndice","ev","popover","component","componentProps","preguntas","event","translucent","openMenu","enable","open","closeMenu","close","selectors","viewQuery","ctx"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}